# Part of Odoo. See LICENSE file for full copyright and licensing details.

import json
import logging
import pprint
import requests
import time

from werkzeug.exceptions import Forbidden
from odoo import http
from odoo.exceptions import ValidationError
from odoo.http import request

_logger = logging.getLogger(__name__)


class CulqiController(http.Controller):
    _complete_url = '/payment/culqi/confirm'
    _webhook_url = '/payment/culqi/webhook/'
    _process_card_url = '/payment/culqi/process_card'

    def _log_process_start(self, process_name, **kwargs):
        """Helper para loggear inicio de proceso con timestamp"""
        _logger.info("=" * 80)
        _logger.info("üöÄ INICIANDO PROCESO: %s", process_name)
        _logger.info("‚è∞ Timestamp: %s", time.strftime('%Y-%m-%d %H:%M:%S'))
        for key, value in kwargs.items():
            if 'token' in key.lower() and value:
                _logger.info("üìã %s: %s", key, str(value)[:12] + '***')
            elif 'key' in key.lower() and value:
                _logger.info("üìã %s: %s", key, str(value)[:8] + '***')
            else:
                _logger.info("üìã %s: %s", key, value)
        _logger.info("=" * 80)

    def _log_process_end(self, process_name, success=True, **kwargs):
        """Helper para loggear fin de proceso"""
        status = "‚úÖ COMPLETADO" if success else "‚ùå FALLIDO"
        _logger.info("-" * 80)
        _logger.info("%s PROCESO: %s", status, process_name)
        _logger.info("‚è∞ Timestamp: %s", time.strftime('%Y-%m-%d %H:%M:%S'))
        for key, value in kwargs.items():
            _logger.info("üìä %s: %s", key, value)
        _logger.info("-" * 80)

    @http.route(_complete_url, type='json', auth='public', methods=['POST'])
    def culqi_confirm_order(self, provider_id, token, reference=None):
        """ Procesa el token recibido del frontend y ejecuta el cobro v√≠a Culqi API.

        :param int provider_id: ID del proveedor 'culqi' (payment.provider)
        :param str token: Token generado en el frontend (tarjeta, yape, etc.)
        :param str reference: Referencia de la transacci√≥n Odoo
        :return: dict con redirect_url
        """
        start_time = time.time()
        
        self._log_process_start(
            "CULQI CONFIRM ORDER",
            provider_id=provider_id,
            token=token,
            reference=reference
        )
        
        try:
            # Paso 1: Validar proveedor
            _logger.info("üîç PASO 1: Validando proveedor Culqi...")
            provider = request.env['payment.provider'].browse(provider_id).sudo()
            
            if not provider:
                _logger.error("‚ùå Proveedor no encontrado con ID: %s", provider_id)
                return {'success': False, 'error': 'Proveedor no encontrado'}
                
            if provider.code != 'culqi':
                _logger.error("‚ùå Proveedor no es Culqi: %s", provider.code)
                return {'success': False, 'error': 'Proveedor Culqi no encontrado'}
                
            _logger.info("‚úÖ Proveedor Culqi v√°lido encontrado: %s (ID: %s)", provider.name, provider.id)
            _logger.info("üîß Configuraci√≥n proveedor - Estado: %s, Modo: %s", 
                        provider.state, 'test' if provider.state == 'test' else 'producci√≥n')

            tx = None

            # Paso 2: Buscar transacci√≥n
            _logger.info("üîç PASO 2: Buscando transacci√≥n...")
            
            if reference:
                _logger.info("üìù Referencia proporcionada: %s", reference)
                
                # M√©todo 1: B√∫squeda est√°ndar
                _logger.info("üîé M√©todo 1: B√∫squeda est√°ndar por notificaci√≥n...")
                try:
                    tx = request.env['payment.transaction'].sudo()._get_tx_from_notification_data(
                        'culqi', {'metadata': {'tx_ref': reference}}
                    )
                    if tx:
                        _logger.info("‚úÖ Transacci√≥n encontrada por m√©todo est√°ndar: %s", tx.reference)
                    else:
                        _logger.info("‚ö†Ô∏è M√©todo est√°ndar no devolvi√≥ resultados")
                except Exception as e:
                    _logger.warning("‚ö†Ô∏è B√∫squeda est√°ndar fall√≥: %s", e)
                
                # M√©todo 2: B√∫squeda directa por referencia
                if not tx:
                    _logger.info("üîé M√©todo 2: B√∫squeda directa por referencia...")
                    tx = request.env['payment.transaction'].sudo().search([
                        ('reference', '=', reference),
                        ('provider_id', '=', provider_id)
                    ], limit=1)
                    
                    if tx:
                        _logger.info("‚úÖ Transacci√≥n encontrada por b√∫squeda directa: %s", tx.reference)
                    else:
                        _logger.info("‚ö†Ô∏è B√∫squeda directa no devolvi√≥ resultados")
                
                # M√©todo 3: B√∫squeda por referencia que contenga parte del reference
                if not tx and 'INV-' in reference:
                    _logger.info("üîé M√©todo 3: B√∫squeda por parte de referencia de factura...")
                    invoice_id = reference.split('-')[2] if len(reference.split('-')) > 2 else None
                    if invoice_id:
                        _logger.info("üìã ID de factura extra√≠do: %s", invoice_id)
                        tx = request.env['payment.transaction'].sudo().search([
                            ('reference', 'ilike', invoice_id),
                            ('provider_id', '=', provider_id),
                            ('state', 'in', ['draft', 'pending'])
                        ], limit=1)
                        
                        if tx:
                            _logger.info("‚úÖ Transacci√≥n encontrada por ID de factura: %s", tx.reference)
                        else:
                            _logger.info("‚ö†Ô∏è B√∫squeda por ID de factura no devolvi√≥ resultados")

            # M√©todo 4: Buscar transacci√≥n pendiente m√°s reciente
            if not tx:
                _logger.info("üîé M√©todo 4: B√∫squeda de transacci√≥n pendiente m√°s reciente...")
                tx = request.env['payment.transaction'].sudo().search([
                    ('provider_id', '=', provider_id),
                    ('state', 'in', ['draft', 'pending']),
                ], order='create_date desc', limit=1)
                
                if tx:
                    _logger.info("‚úÖ Transacci√≥n pendiente encontrada: %s", tx.reference)
                else:
                    _logger.info("‚ö†Ô∏è No se encontraron transacciones pendientes")

            if not tx:
                _logger.error("‚ùå PASO 2 FALLIDO: No se encontr√≥ transacci√≥n v√°lida")
                self._log_process_end("CULQI CONFIRM ORDER", False, error="Transacci√≥n no encontrada")
                return {'success': False, 'error': 'Transacci√≥n no encontrada'}

            # Log detalles de la transacci√≥n encontrada
            _logger.info("‚úÖ PASO 2 COMPLETADO: Transacci√≥n encontrada")
            _logger.info("üìä Detalles de transacci√≥n:")
            _logger.info("   - ID: %s", tx.id)
            _logger.info("   - Referencia: %s", tx.reference)
            _logger.info("   - Estado: %s", tx.state)
            _logger.info("   - Monto: %s %s", tx.amount, tx.currency_id.name if tx.currency_id else 'N/A')
            _logger.info("   - Fecha creaci√≥n: %s", tx.create_date)
            _logger.info("   - Proveedor: %s", tx.provider_id.name)

            # Paso 3: Procesar el pago
            _logger.info("üîç PASO 3: Procesando el pago...")
            processing_values = {
                'culqi_token': token,
            }
            _logger.info("üì¶ Valores de procesamiento: %s", {
                'culqi_token': token[:12] + '***' if token else 'None'
            })

            # Procesar el pago
            _logger.info("‚öôÔ∏è Ejecutando _process_direct_payment...")
            tx._process_direct_payment(processing_values)
            _logger.info("‚úÖ PASO 3 COMPLETADO: Pago procesado exitosamente")
            
            # Paso 4: Determinar URL de redirecci√≥n
            _logger.info("üîç PASO 4: Determinando URL de redirecci√≥n...")
            redirect_url = '/payment/status'
            
            if hasattr(tx, 'return_url') and tx.return_url:
                redirect_url = tx.return_url
                _logger.info("üîó URL de retorno encontrada en transacci√≥n: %s", redirect_url)
            elif hasattr(tx, 'landing_route') and tx.landing_route:
                redirect_url = tx.landing_route
                _logger.info("üîó Ruta de aterrizaje encontrada en transacci√≥n: %s", redirect_url)
            else:
                _logger.info("üîó Usando URL de redirecci√≥n por defecto: %s", redirect_url)

            _logger.info("‚úÖ PASO 4 COMPLETADO: URL de redirecci√≥n determinada")

            # Proceso completado exitosamente
            elapsed_time = time.time() - start_time
            self._log_process_end(
                "CULQI CONFIRM ORDER", 
                True,
                redirect_url=redirect_url,
                transaction_id=tx.id,
                elapsed_time=f"{elapsed_time:.2f}s"
            )
            
            return {'redirect_url': redirect_url}
            
        except Exception as e:
            elapsed_time = time.time() - start_time
            _logger.exception("‚ùå Error confirmando pago Culqi: %s", e)
            self._log_process_end(
                "CULQI CONFIRM ORDER", 
                False, 
                error=str(e),
                elapsed_time=f"{elapsed_time:.2f}s"
            )
            return {'success': False, 'error': str(e)}

    @http.route(_process_card_url, type='json', auth='public', methods=['POST'])
    def culqi_process_card(self, **kwargs):
        """ Procesa datos de tarjeta directamente, crea token y ejecuta el cobro.

        :param dict kwargs: Par√°metros que incluyen provider_id, reference, card_data, amount
        :return: dict con success/error y redirect_url
        """
        start_time = time.time()
        
        # Extraer par√°metros
        provider_id = kwargs.get('provider_id')
        reference = kwargs.get('reference')
        card_data = kwargs.get('card_data', {})
        amount = kwargs.get('amount')
        extra_info = kwargs.get('extra_info', {})

        self._log_process_start(
            "CULQI PROCESS CARD",
            provider_id=provider_id,
            reference=reference,
            amount=f"{amount} centavos" if amount else "No definido",
            card_data_keys=list(card_data.keys()) if card_data else "No definido",
            extra_info=extra_info
        )

        try:
            # Paso 1: Validaciones b√°sicas
            _logger.info("üîç PASO 1: Validaciones b√°sicas...")
            
            if not provider_id:
                _logger.error("‚ùå ID de proveedor no proporcionado")
                return {'success': False, 'error': 'ID de proveedor requerido'}
            _logger.info("‚úÖ Provider ID v√°lido: %s", provider_id)
            
            if not reference:
                _logger.error("‚ùå Referencia de transacci√≥n no proporcionada")
                return {'success': False, 'error': 'Referencia de transacci√≥n requerida'}
            _logger.info("‚úÖ Referencia v√°lida: %s", reference)
                
            if not card_data:
                _logger.error("‚ùå Datos de tarjeta no proporcionados")
                return {'success': False, 'error': 'Datos de tarjeta requeridos'}
            _logger.info("‚úÖ Datos de tarjeta proporcionados: %s", list(card_data.keys()))
                
            if not amount:
                _logger.error("‚ùå Monto no proporcionado")
                return {'success': False, 'error': 'Monto requerido'}
            _logger.info("‚úÖ Monto v√°lido: %s centavos (%.2f soles)", amount, amount/100.0)

            _logger.info("‚úÖ PASO 1 COMPLETADO: Todas las validaciones b√°sicas pasaron")

            # Paso 2: Obtener proveedor Culqi
            _logger.info("üîç PASO 2: Obteniendo proveedor Culqi...")
            provider = request.env['payment.provider'].browse(provider_id).sudo()
            
            if not provider:
                _logger.error("‚ùå Proveedor no encontrado con ID: %s", provider_id)
                return {'success': False, 'error': 'Proveedor no encontrado'}
                
            if provider.code != 'culqi':
                _logger.error("‚ùå Proveedor no es Culqi: %s", provider.code)
                return {'success': False, 'error': 'Proveedor Culqi no encontrado'}

            _logger.info("‚úÖ PASO 2 COMPLETADO: Proveedor Culqi v√°lido")
            _logger.info("üìä Detalles del proveedor:")
            _logger.info("   - Nombre: %s", provider.name)
            _logger.info("   - Estado: %s", provider.state)
            _logger.info("   - C√≥digo: %s", provider.code)
            _logger.info("   - Clave p√∫blica configurada: %s", bool(provider.culqi_public_key))
            _logger.info("   - Clave secreta configurada: %s", bool(provider.culqi_secret_key))

            # Paso 3: Obtener transacci√≥n
            _logger.info("üîç PASO 3: Obteniendo transacci√≥n...")
            tx = None
            
            # M√©todo 1: Buscar por referencia usando el m√©todo est√°ndar
            if reference and reference != 'NO_REFERENCE':
                _logger.info("üîé M√©todo 1: B√∫squeda est√°ndar por notificaci√≥n...")
                try:
                    tx = request.env['payment.transaction'].sudo()._get_tx_from_notification_data(
                        'culqi', {'metadata': {'tx_ref': reference}}
                    )
                    if tx:
                        _logger.info("‚úÖ Transacci√≥n encontrada por m√©todo est√°ndar")
                    else:
                        _logger.info("‚ö†Ô∏è M√©todo est√°ndar no devolvi√≥ resultados")
                except Exception as e:
                    _logger.warning("‚ö†Ô∏è No se pudo obtener transacci√≥n por m√©todo est√°ndar: %s", e)
                
            # M√©todo 2: Buscar directamente por referencia
            if not tx and reference and reference != 'NO_REFERENCE':
                _logger.info("üîé M√©todo 2: B√∫squeda directa por referencia...")
                tx = request.env['payment.transaction'].sudo().search([
                    ('reference', '=', reference),
                    ('provider_id', '=', provider_id)
                ], limit=1)
                
                if tx:
                    _logger.info("‚úÖ Transacci√≥n encontrada por b√∫squeda directa")
                else:
                    _logger.info("‚ö†Ô∏è B√∫squeda directa no devolvi√≥ resultados")
                
            # M√©todo 3: Buscar por monto y proveedor si tenemos informaci√≥n de la URL
            if not tx and extra_info.get('current_url'):
                _logger.info("üîé M√©todo 3: B√∫squeda por monto y URL...")
                current_url = extra_info['current_url']
                amount_soles = amount / 100.0
                _logger.info("üìã URL actual: %s", current_url)
                _logger.info("üìã Monto en soles: %.2f", amount_soles)
                
                # Si es una factura, buscar por monto
                if 'invoices' in current_url:
                    _logger.info("üîé Detectada factura en URL, buscando por monto...")
                    tx = request.env['payment.transaction'].sudo().search([
                        ('provider_id', '=', provider_id),
                        ('amount', '=', amount_soles),
                        ('state', 'in', ['draft', 'pending']),
                    ], order='create_date desc', limit=1)
                    
                    if tx:
                        _logger.info("‚úÖ Transacci√≥n encontrada por monto de factura")
                    else:
                        _logger.info("‚ö†Ô∏è B√∫squeda por monto no devolvi√≥ resultados")
                    
            # M√©todo 4: Buscar la transacci√≥n m√°s reciente del proveedor en estado pendiente
            if not tx:
                _logger.info("üîé M√©todo 4: B√∫squeda de transacci√≥n pendiente m√°s reciente...")
                tx = request.env['payment.transaction'].sudo().search([
                    ('provider_id', '=', provider_id),
                    ('state', 'in', ['draft', 'pending']),
                ], order='create_date desc', limit=1)
                
                if tx:
                    _logger.info("‚úÖ Transacci√≥n pendiente m√°s reciente encontrada")
                else:
                    _logger.info("‚ö†Ô∏è No se encontraron transacciones pendientes")
                
            if not tx:
                _logger.error("‚ùå PASO 3 FALLIDO: No se encontr√≥ transacci√≥n v√°lida para referencia: %s", reference)
                self._log_process_end("CULQI PROCESS CARD", False, error="Transacci√≥n no encontrada")
                return {'success': False, 'error': f'No se encontr√≥ transacci√≥n v√°lida para la referencia: {reference}'}

            _logger.info("‚úÖ PASO 3 COMPLETADO: Transacci√≥n encontrada")
            _logger.info("üìä Detalles de transacci√≥n:")
            _logger.info("   - ID: %s", tx.id)
            _logger.info("   - Referencia: %s", tx.reference)
            _logger.info("   - Estado: %s", tx.state)
            _logger.info("   - Monto: %s %s", tx.amount, tx.currency_id.name if tx.currency_id else 'N/A')

            # Paso 4: Crear token en Culqi API
            _logger.info("üîç PASO 4: Creando token en Culqi...")
            token_data = {
                'card_number': card_data['card_number'],
                'expiration_month': card_data['expiration_month'],
                'expiration_year': card_data['expiration_year'],
                'cvv': card_data['cvv'],
                'email': card_data['email']
            }

            _logger.info("üì§ Datos para crear token:")
            _logger.info("   - N√∫mero de tarjeta: %s****", card_data['card_number'][:4])
            _logger.info("   - Mes expiraci√≥n: %s", card_data['expiration_month'])
            _logger.info("   - A√±o expiraci√≥n: %s", card_data['expiration_year'])
            _logger.info("   - Email: %s", card_data['email'])

            # Llamar a API de Culqi para crear token
            token_url = 'https://secure.culqi.com/v2/tokens'
            headers = {
                'Authorization': f'Bearer {provider.culqi_public_key}',
                'Content-Type': 'application/json'
            }
            
            _logger.info("üåê Enviando petici√≥n a Culqi API...")
            _logger.info("   - URL: %s", token_url)
            _logger.info("   - Headers: %s", {k: v[:20] + '***' if k == 'Authorization' else v for k, v in headers.items()})

            token_response = requests.post(token_url, json=token_data, headers=headers, timeout=30)
            
            _logger.info("üì• Respuesta de Culqi recibida:")
            _logger.info("   - Status Code: %s", token_response.status_code)
            _logger.info("   - Headers: %s", dict(token_response.headers))
            
            if token_response.status_code != 200:
                _logger.error("‚ùå Error creando token: %s", token_response.text)
                self._log_process_end("CULQI PROCESS CARD", False, error="Error creando token")
                return {'success': False, 'error': 'Error creando token de pago'}

            token_result = token_response.json()
            _logger.info("üìã Respuesta completa del token: %s", pprint.pformat(token_result))
            
            culqi_token = token_result.get('id')
            
            if not culqi_token:
                _logger.error("‚ùå Token no recibido en respuesta: %s", token_result)
                self._log_process_end("CULQI PROCESS CARD", False, error="Token no generado")
                return {'success': False, 'error': 'Token de pago no generado'}

            _logger.info("‚úÖ PASO 4 COMPLETADO: Token creado exitosamente")
            _logger.info("üé´ Token ID: %s", culqi_token[:12] + '***')

            # Paso 5: Crear cargo en Culqi
            _logger.info("üîç PASO 5: Creando cargo en Culqi...")
            charge_data = {
                'amount': amount,
                'currency_code': 'PEN',
                'description': f'Pago Odoo - {tx.reference}',
                'email': card_data['email'],
                'source_id': culqi_token,
                'metadata': {
                    'order_id': tx.reference,
                    'odoo_tx_id': tx.id
                }
            }

            _logger.info("üì§ Datos para crear cargo:")
            _logger.info("   - Monto: %s centavos", amount)
            _logger.info("   - Moneda: PEN")
            _logger.info("   - Descripci√≥n: %s", charge_data['description'])
            _logger.info("   - Email: %s", card_data['email'])
            _logger.info("   - Source ID: %s", culqi_token[:12] + '***')
            _logger.info("   - Metadata: %s", charge_data['metadata'])

            charge_url = 'https://api.culqi.com/v2/charges'
            charge_headers = {
                'Authorization': f'Bearer {provider.culqi_secret_key}',
                'Content-Type': 'application/json'
            }

            _logger.info("üåê Enviando petici√≥n de cargo a Culqi API...")
            _logger.info("   - URL: %s", charge_url)
            _logger.info("   - Headers: %s", {k: v[:20] + '***' if k == 'Authorization' else v for k, v in charge_headers.items()})

            charge_response = requests.post(charge_url, json=charge_data, headers=charge_headers, timeout=30)
            
            _logger.info("üì• Respuesta de cargo recibida:")
            _logger.info("   - Status Code: %s", charge_response.status_code)
            _logger.info("   - Headers: %s", dict(charge_response.headers))
            
            if charge_response.status_code != 200:
                _logger.error("‚ùå Error creando cargo: %s", charge_response.text)
                self._log_process_end("CULQI PROCESS CARD", False, error="Error procesando pago")
                return {'success': False, 'error': 'Error procesando el pago'}

            charge_result = charge_response.json()
            _logger.info("üìã Respuesta completa del cargo: %s", pprint.pformat(charge_result))
            
            _logger.info("‚úÖ PASO 5 COMPLETADO: Cargo creado exitosamente")
            _logger.info("üí≥ Cargo ID: %s", charge_result.get('id', 'No ID'))

            # Paso 6: Procesar la transacci√≥n en Odoo
            _logger.info("üîç PASO 6: Procesando transacci√≥n en Odoo...")
            processing_values = {
                'culqi_token': culqi_token,
                'culqi_charge_id': charge_result.get('id'),
                'culqi_charge': charge_result
            }
            
            _logger.info("üì¶ Valores de procesamiento para Odoo:")
            _logger.info("   - Token: %s", culqi_token[:12] + '***')
            _logger.info("   - Charge ID: %s", charge_result.get('id'))
            _logger.info("   - Charge data keys: %s", list(charge_result.keys()) if charge_result else 'None')

            _logger.info("‚öôÔ∏è Ejecutando _process_direct_payment...")
            tx._process_direct_payment(processing_values)
            _logger.info("‚úÖ PASO 6 COMPLETADO: Transacci√≥n procesada en Odoo")

            # Paso 7: Determinar URL de redirecci√≥n
            _logger.info("üîç PASO 7: Determinando URL de redirecci√≥n...")
            redirect_url = '/payment/status'
            
            if hasattr(tx, 'return_url') and tx.return_url:
                redirect_url = tx.return_url
                _logger.info("üîó URL de retorno encontrada: %s", redirect_url)
            else:
                _logger.info("üîó Usando URL por defecto: %s", redirect_url)

            _logger.info("‚úÖ PASO 7 COMPLETADO: URL de redirecci√≥n determinada")

            # Proceso completado exitosamente
            elapsed_time = time.time() - start_time
            self._log_process_end(
                "CULQI PROCESS CARD", 
                True,
                redirect_url=redirect_url,
                transaction_id=tx.id,
                charge_id=charge_result.get('id'),
                elapsed_time=f"{elapsed_time:.2f}s"
            )

            return {
                'success': True, 
                'redirect_url': redirect_url,
                'transaction_id': tx.id,
                'charge_id': charge_result.get('id')
            }

        except requests.exceptions.Timeout as e:
            elapsed_time = time.time() - start_time
            _logger.exception("‚ùå Timeout en conexi√≥n con Culqi: %s", e)
            self._log_process_end("CULQI PROCESS CARD", False, error="Timeout", elapsed_time=f"{elapsed_time:.2f}s")
            return {'success': False, 'error': 'Timeout de conexi√≥n con el procesador de pagos'}
        
        except requests.exceptions.RequestException as e:
            elapsed_time = time.time() - start_time
            _logger.exception("‚ùå Error de conexi√≥n con Culqi: %s", e)
            self._log_process_end("CULQI PROCESS CARD", False, error="Error de conexi√≥n", elapsed_time=f"{elapsed_time:.2f}s")
            return {'success': False, 'error': 'Error de conexi√≥n con el procesador de pagos'}
        
        except Exception as e:
            elapsed_time = time.time() - start_time
            _logger.exception("‚ùå Error inesperado procesando tarjeta: %s", e)
            self._log_process_end("CULQI PROCESS CARD", False, error=str(e), elapsed_time=f"{elapsed_time:.2f}s")
            return {'success': False, 'error': 'Error inesperado procesando el pago'}

    @http.route(_webhook_url, type='http', auth='public', methods=['POST'], csrf=False)
    def culqi_webhook(self, **post):
        """ Procesa la notificaci√≥n de Culqi (evento tipo 'charge.created', etc.)

        :return: Respuesta vac√≠a (200 OK) para confirmar la recepci√≥n.
        """
        start_time = time.time()
        
        try:
            _logger.info("=" * 80)
            _logger.info("üîî WEBHOOK CULQI RECIBIDO")
            _logger.info("‚è∞ Timestamp: %s", time.strftime('%Y-%m-%d %H:%M:%S'))
            _logger.info("üì° Headers recibidos: %s", dict(request.httprequest.headers))
            _logger.info("üì° M√©todo: %s", request.httprequest.method)
            _logger.info("üì° URL: %s", request.httprequest.url)
            _logger.info("=" * 80)
            
            # Leer datos del webhook
            raw_data = request.httprequest.data.decode('utf-8')
            _logger.info("üì• Datos crudos recibidos: %s", raw_data)
            
            data = json.loads(raw_data)
            _logger.info("üìä Datos JSON parseados: %s", pprint.pformat(data))
            
            event_type = data.get('type')
            charge = data.get('data', {}).get('object', {})
            
            _logger.info("üîç Procesando webhook:")
            _logger.info("   - Tipo de evento: %s", event_type)
            _logger.info("   - ID del cargo: %s", charge.get('id'))
            _logger.info("   - Estado del cargo: %s", charge.get('outcome', {}).get('code'))
            _logger.info("   - Monto: %s %s", charge.get('amount'), charge.get('currency_code'))
            
            if charge.get('metadata'):
                _logger.info("   - Metadata: %s", charge.get('metadata'))

            # Buscar transacci√≥n
            _logger.info("üîç Buscando transacci√≥n relacionada...")
            try:
                tx = request.env['payment.transaction'].sudo()._get_tx_from_notification_data(
                    'culqi', charge
                )
                
                if tx:
                    _logger.info("‚úÖ Transacci√≥n encontrada:")
                    _logger.info("   - ID: %s", tx.id)
                    _logger.info("   - Referencia: %s", tx.reference)
                    _logger.info("   - Estado antes: %s", tx.state)
                else:
                    _logger.warning("‚ö†Ô∏è No se encontr√≥ transacci√≥n para el webhook")
                    
            except Exception as e:
                _logger.error("‚ùå Error buscando transacci√≥n: %s", e)
                tx = None

            # Procesar notificaci√≥n
            if tx:
                _logger.info("‚öôÔ∏è Procesando notificaci√≥n de webhook...")
                try:
                    tx._handle_notification_data('culqi', charge)
                    _logger.info("‚úÖ Notificaci√≥n procesada exitosamente")
                    _logger.info("   - Estado despu√©s: %s", tx.state)
                    
                    # Log adicional del estado de la transacci√≥n
                    if hasattr(tx, 'state_message'):
                        _logger.info("   - Mensaje de estado: %s", tx.state_message)
                        
                except Exception as e:
                    _logger.error("‚ùå Error procesando notificaci√≥n: %s", e)
                    raise
            else:
                _logger.warning("‚ö†Ô∏è Webhook recibido pero no se pudo procesar - transacci√≥n no encontrada")

            elapsed_time = time.time() - start_time
            _logger.info("-" * 80)
            _logger.info("‚úÖ WEBHOOK PROCESADO EXITOSAMENTE")
            _logger.info("‚è∞ Tiempo de procesamiento: %.2fs", elapsed_time)
            _logger.info("-" * 80)
            
        except json.JSONDecodeError as e:
            elapsed_time = time.time() - start_time
            _logger.error("‚ùå Error parseando JSON del webhook: %s", e)
            _logger.error("üì• Datos recibidos: %s", request.httprequest.data.decode('utf-8', errors='ignore'))
            _logger.info("‚è∞ Tiempo transcurrido: %.2fs", elapsed_time)
            raise Forbidden(description="JSON inv√°lido en webhook.")
            
        except Exception as e:
            elapsed_time = time.time() - start_time
            _logger.exception("‚ùå Error procesando webhook de Culqi: %s", e)
            _logger.info("‚è∞ Tiempo transcurrido: %.2fs", elapsed_time)
            _logger.info("üìä Contexto del error:")
            _logger.info("   - Headers: %s", dict(request.httprequest.headers))
            _logger.info("   - Datos: %s", request.httprequest.data.decode('utf-8', errors='ignore')[:500])
            raise Forbidden(description="Webhook no v√°lido o incompleto.")

        return request.make_response('OK', headers=[('Content-Type', 'text/plain')])